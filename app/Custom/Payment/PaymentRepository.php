<?php


namespace App\Custom\Payment;

use App\Events\PaymentCompleted;
use App\Models\Payment;
use App\Models\Transaction;
use App\Models\User;
use Auth;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Spatie\Permission\Models\Permission;
use Spatie\Permission\Models\Role;
use Illuminate\Support\Facades\Http;


class PaymentRepository
{
    public static function initiatePayment()
    {
        include_once('OAuth.php');
        $date = new \DateTime();
        $time = $date->getTimestamp();
        $reference = "AJ-" . date("Ymd") . "-" . $time . "-" . Auth::user()->id;

        $token = $params = NULL;
        $consumer_key = 'z3BdDR2pvzMM4yFeeNKl0sMy0Sk1tRqb'; //Register a merchant account on
        //demo.pesapal.com and use the merchant key for testing.
        //When you are ready to go live make sure you change the key to the live account
        //registered on www.pesapal.com!
        $consumer_secret = 'Gh2I6wzsgVFSCu/hafPRJYoYP7U='; // Use the secret from your test
        //account on demo.pesapal.com. When you are ready to go live make sure you
        //change the secret to the live account registered on www.pesapal.com!
        $signature_method = new \OAuthSignatureMethod_HMAC_SHA1();
        $iframelink = 'https://www.pesapal.com/API/PostPesapalDirectOrderV4'; //change to     
        //https://www.pesapal.com/API/PostPesapalDirectOrderV4 when you are ready to go live!

        $amount0 = session()->get('amount'); //$_SESSION['amount'];//1000;				   
        $amount = number_format($amount0, 2); //format amount to 2 decimal places
        if (session()->get('message') !== "") {
            $desc = session()->get('message'); //$_POST['description'];
        } else {
            $desc = "No Description";
        }
        $type = "MERCHANT"; //$_POST['type']; //default value = MERCHANT
        $reference = $reference; //$_POST['reference'];//unique order id of the transaction, generated by merchant
        $name = explode(" ", Auth::user()->name);
        if (count($name) == 3) {
            $first_name = $name[0];
            $last_name = $name[2];
        } else if (count($name) == 2) {
            $first_name = $name[0];
            $last_name = $name[1];
        } else if (count($name) == 1) {
            $first_name = $name[0];
            $last_name = "";
        } else {
            $first_name = $name[0] ?? ""; //$_POST['first_name']; //[optional]
            $last_name = $name[1] ?? ""; //$_POST['last_name']; //[optional]
        }
        $email = session()->get('email'); //$_POST['email'];
        $phonenumber = Auth::user()->phone; //ONE of email or phonenumber is required


        $trans_data = [
            "payer_name" => Auth::user()->name,
            "reference_number" => $reference,
            "user_id" => Auth::user()->id,
            "description" => "",
            "amount" => $amount0,
            "tracking_id" => null,
        ];
        $transaction = Transaction::create($trans_data);


        if (!isset($_SESSION['callback'])) {
            $callback_url = 'http://www.ajiriwa.net'; //redirect url, the page that will handle the response from pesapal.
        } else {
            $callback_url = $_SESSION['callback'];
        }
        $post_xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?><PesapalDirectOrderInfo xmlns:xsi=\"http://www.w3.org/2001/XMLSchemainstance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" Amount=\"" . $amount . "\" Description=\"" . $desc . "\" Type=\"" . $type . "\" Reference=\"" . $reference . "\" FirstName=\"" . $first_name . "\" LastName=\"" . $last_name . "\" Email=\"" . $email . "\" PhoneNumber=\"" . $phonenumber . "\" xmlns=\"http://www.pesapal.com\" />";
        $post_xml = htmlentities($post_xml);

        $consumer = new \OAuthConsumer($consumer_key, $consumer_secret);
        //post transaction to pesapal
        $iframe_src = \OAuthRequest::from_consumer_and_token(
            $consumer,
            $token,
            "GET",
            $iframelink,
            $params
        );
        $iframe_src->set_parameter("oauth_callback", $callback_url);
        $iframe_src->set_parameter("pesapal_request_data", $post_xml);
        $iframe_src->sign_request($signature_method, $consumer, $token);
        //return $iframe_src;

        return [
            'transaction' => $transaction,
            'iframe' => '<iframe onload="document.getElementById(\'gateway-loading\').style.display=\'none\'" src="' . $iframe_src . '" width="100%" height="400px" scrolling="auto" frameBorder="0" id="paymentFrame"> <p>Unable to load the payment page</p> </iframe>'
        ];
    }

    public static function createAccessToken()
    {
        $pesapalUrl = 'https://pay.pesapal.com/v3/api/Auth/RequestToken';
        $consumerKey = config('app.pesapal.consumer_key');
        $consumerSecret = config('app.pesapal.consumer_secret');

        $response = Http::withHeaders([
            'Accept' => 'application/json',
            'Content-Type' => 'application/json',
        ])->post($pesapalUrl, [
            'consumer_key' => $consumerKey,
            'consumer_secret' => $consumerSecret,
        ]);

        // Check if the request was successful
        if ($response->successful()) {
            // Get the response JSON data
            $responseData = $response->json();
            // return the response data
            return $responseData;
        } else {
            // Handle the error if the request was not successful
            return $response->body();
            dd('Error:', $response->status(), $response->body());
        }
    }

    public static function ipnList($token = null)
    {
        $url = 'https://pay.pesapal.com/v3/api/URLSetup/GetIpnList';
        if (!$token) {
            $tokenData = self::createAccessToken();
        } else {
            $tokenData = [
                'token' => $token,
            ];
        }
        $response = Http::withHeaders([
            'Accept' => 'application/json',
            'Content-Type' => 'application/json',
            'Authorization' => 'Bearer ' . $tokenData['token'],
        ])->get($url);
        if ($response->successful()) {
            return $response->json();
        } else {
            return $response->body();
        }
    }

    /**
     * The function to initiate payment to the pesapal gateways
     * @param number $amount Amount that is to be charged
     * @param text $email Email address of the payer
     * @param string $token Authentication token if null it will be generated
     * @param string $transaction_type type of transaction default value is balance-recharge
     * @param string $from_url the url where payment was initiated
     * @return void
     */
    public static function initPay($amount, $email, $token = null, $transaction_type = 'balance-recharge', $from_url=null)
    {
        $url = 'https://pay.pesapal.com/v3/api/Transactions/SubmitOrderRequest';
        $date = new \DateTime();
        $time = $date->getTimestamp();
        $reference = "AJ-" . date("Ymd") . "-" . $time /* . "-" . Auth::user()->id */;
        if (!$token) {
            $tokenData = self::createAccessToken();
        } else {
            $tokenData = [
                'token' => $token,
            ];
        }
        $currency = 'TZS';
        $data = [
            'id' => $reference,
            'currency' => $currency,
            'amount' => $amount,
            'description' => 'Recharge ' . $amount,
            'callback_url' => 'https://beta.ajiriwa.net/payment-status.php',
            'redirect_mode' => '',
            'notification_id' => 'fa225773-e432-4dd3-a60c-de33a47e8c34',//'33ce89a4-8207-4308-9c6e-df77e8d6759c',
            'branch' => 'HQ',
            'billing_address' => [
                'email_address' => $email,
                'phone_number' => '',
                'country_code' => 'TZ',
                'first_name' => '',
                'middle_name' => '',
                'last_name' => '',
                'line_1' => '',
                'line_2' => '',
                'city' => '',
                'state' => '',
                'postal_code' => '',
                'zip_code' => ''
            ]
        ];
        $response = Http::withHeaders([
            'Accept' => 'application/json',
            'Content-Type' => 'application/json',
            'Authorization' => 'Bearer ' . $tokenData['token'],
        ])->post($url, $data);

        if ($response->successful()) {
            // create the transation into the database
            $data = [
                'reference_number' => $reference,
                'transaction_type' => $transaction_type,
                'transaction_tracking_id' => $response->json()['order_tracking_id'],
                'status' => 'Initiated',
                'currency' => $currency,
                'amount' => $amount
            ];
            if(Auth::check()){
                $data['user_id'] = Auth::user()->id;
            }
            if($from_url){
                $data['from_url'] = $from_url;
            }
            $payment = Payment::create($data);
            $resp = $response->json();
            $resp['payment'] = $payment;
            $resp['iframe'] = '<iframe onload="document.getElementById(\'gateway-loading\').style.display=\'none\'" src="' . $resp['redirect_url'] . '" width="100%" height="400px" scrolling="auto" frameBorder="0" id="paymentFrame"> <p>Unable to load the payment page</p> </iframe>';
            return $resp;
        } else {
        }
    }

    /**
     * Function that takes action of updating the status of the local payment
     *
     * @param string $tracking_id
     * @param string $status Response from checkPaymentStatus()
     * @return void
     */
    public static function processPaymentStatus($tracking_id, $status)
    {
        // if the status code is 
        $status_desc = $status['payment_status_description'];
        $payment = Payment::where('transaction_tracking_id', $tracking_id)->first();
        // change the status
        if ($payment && $payment->status != $status_desc)
            $payment->update(['status' => $status_desc]);
        switch (strtolower($status_desc)) {
            case 'completed':
                // check if the transaction has been redeemed if not redeem it
                if (!$payment->redeemed && $payment->user_id) {
                    // add the balance to the ajiriwa balance
                    if($payment->user_id){
                        $description = "Balance Topup (Payment ID ".$payment->id.")";
                    }else{
                        $description = "Payment ID " . $payment->id;
                    }
                    chargeAjiriwaBalance($payment->amount, '+', $payment->user_id, $description);
                    // mark the payment as redeemed
                    $payment->update(['redeemed' => true]);
                    // emit an event that to show that it paid
                    event(new PaymentCompleted($payment->id));
                }
                break;
            default:
                break;
                /* case 'FAILED':
                // send the notification that the payment has failed
                break;
            case 'INVALID':
                break; */
        }
    }

    public static function checkPaymentStatus($tracking_id)
    {
        $url = 'https://pay.pesapal.com/v3/api/Transactions/GetTransactionStatus?orderTrackingId=' . $tracking_id;
        $token_data = self::createAccessToken();
        $response = Http::withHeaders([
            'Accept' => 'application/json',
            'Content-Type' => 'application/json',
            'Authorization' => 'Bearer ' . $token_data['token'],
        ])->get($url);
        if ($response->successful()) {
            return $response->json();
        } else {
            return $response->body();
        }
    }
}
